"""–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏ –ø–∞—Ä—Å–µ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""

import logging
import re
from pathlib import Path

logger = logging.getLogger(__name__)


class PromptLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏ –ø–∞—Ä—Å–µ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""

    def __init__(self, prompt_text: str | None = None, prompt_file: str | None = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤

        Args:
            prompt_text: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª)
            prompt_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ prompt_text)
        """
        self.prompt_text = prompt_text or "You are a helpful AI assistant."
        self.prompt_file = prompt_file
        self.full_prompt = self._load_prompt()
        self.role_name = self._parse_role_name()

    def _load_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        if self.prompt_file:
            try:
                prompt_path = Path(self.prompt_file)
                content = prompt_path.read_text(encoding="utf-8").strip()
                logger.info(f"–ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞: {self.prompt_file}")
                return content
            except FileNotFoundError:
                logger.warning(f"–§–∞–π–ª {self.prompt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞")

        return self.prompt_text

    def _parse_role_name(self) -> str:
        """–ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "–†–æ–ª—å: <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
        match = re.search(r"^–†–æ–ª—å:\s*(.+)$", self.full_prompt, re.MULTILINE)
        if match:
            return match.group(1).strip()
        return "AI Assistant"

    def get_system_prompt(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM"""
        return self.full_prompt

    def get_role_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        return self.role_name

    def get_role_description(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /role"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ "–†–æ–ª—å:"
        lines = self.full_prompt.split("\n")
        description_lines = []

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å —Ä–æ–ª—å—é
        role_line_idx = -1
        for i, line in enumerate(lines):
            if line.startswith("–†–æ–ª—å:"):
                role_line_idx = i
                break

        # –ë–µ—Ä–µ–º –¥–æ 5 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–æ–ª–∏
        if role_line_idx >= 0:
            for line in lines[role_line_idx + 1 : role_line_idx + 6]:
                stripped = line.strip()
                if stripped and not stripped.startswith("---"):
                    description_lines.append(stripped)

        description = "\n".join(description_lines) if description_lines else ""

        return f"ü§ñ –ú–æ—è —Ä–æ–ª—å: {self.role_name}\n\n{description}"
