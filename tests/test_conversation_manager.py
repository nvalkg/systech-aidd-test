"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è conversation_manager"""

from unittest.mock import AsyncMock

import pytest

from src.conversation_manager import ConversationManager


@pytest.fixture
def mock_llm_client():
    """–ú–æ–∫ LLMClient"""
    client = AsyncMock()
    client.model = "test-model"
    client.get_response = AsyncMock(return_value="Test response")
    return client


@pytest.mark.asyncio
async def test_process_message(mock_llm_client):
    """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    manager = ConversationManager(mock_llm_client, "System prompt", max_history=10)

    response = await manager.process_message(123, "Hello")

    assert response == "Test response"
    mock_llm_client.get_response.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    context = manager.storage.get_context(123)
    assert context is not None
    assert len(context.messages) == 1
    assert len(context.responses) == 1


@pytest.mark.asyncio
async def test_process_multiple_messages(mock_llm_client):
    """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    manager = ConversationManager(mock_llm_client, "System prompt")

    await manager.process_message(123, "First")
    await manager.process_message(123, "Second")

    context = manager.storage.get_context(123)
    assert context is not None
    assert len(context.messages) == 2
    assert len(context.responses) == 2


def test_clear_history(mock_llm_client):
    """–¢–µ—Å—Ç: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    manager = ConversationManager(mock_llm_client, "System prompt")
    manager.storage.add_message(123, "Hello", "System prompt")

    assert manager.storage.get_context(123) is not None

    manager.clear_history(123)
    assert manager.storage.get_context(123) is None


class TestGetRoleDescription:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ get_role_description"""

    def test_get_role_description(self, mock_llm_client) -> None:
        """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏"""
        # Arrange
        system_prompt = "–†–æ–ª—å: Test Assistant\n\nYou are a test assistant."
        manager = ConversationManager(mock_llm_client, system_prompt)

        # Act
        description = manager.get_role_description()

        # Assert
        assert isinstance(description, str)
        assert len(description) > 0
        # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
        assert "—Ä–æ–ª—å" in description.lower() or "role" in description.lower()

    def test_get_role_description_integration(self, mock_llm_client) -> None:
        """–¢–µ—Å—Ç: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PromptLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏"""
        # Arrange
        specialized_prompt = """–†–æ–ª—å: Python Code Reviewer Expert

–¢—ã - –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 10+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ code review.

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- SOLID, DRY, KISS - –æ—Å–Ω–æ–≤–∞ —Ç–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""

        manager = ConversationManager(mock_llm_client, specialized_prompt)

        # Act
        description = manager.get_role_description()

        # Assert
        assert "Python Code Reviewer Expert" in description
        assert "ü§ñ" in description  # Emoji –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
