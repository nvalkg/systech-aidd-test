"""–¢–µ—Å—Ç—ã –¥–ª—è PromptLoader - –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""

from pathlib import Path

from src.prompt_loader import PromptLoader


class TestPromptLoaderInit:
    """–¢–µ—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PromptLoader"""

    def test_prompt_loader_init_default(self) -> None:
        """–¢–µ—Å—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        # Arrange & Act
        loader = PromptLoader()

        # Assert
        assert loader.get_system_prompt() == "You are a helpful AI assistant."
        assert loader.get_role_name() == "AI Assistant"

    def test_prompt_loader_init_with_text(self) -> None:
        """–¢–µ—Å—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞"""
        # Arrange
        custom_prompt = "–†–æ–ª—å: Custom Assistant\n\nYou are a custom assistant."

        # Act
        loader = PromptLoader(prompt_text=custom_prompt)

        # Assert
        assert loader.get_system_prompt() == custom_prompt
        assert loader.get_role_name() == "Custom Assistant"

    def test_prompt_loader_init_with_file(self, tmp_path: Path) -> None:
        """–¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        # Arrange: —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º
        prompt_file = tmp_path / "test_prompt.txt"
        prompt_content = "–†–æ–ª—å: File Assistant\n\nLoaded from file."
        prompt_file.write_text(prompt_content, encoding="utf-8")

        # Act
        loader = PromptLoader(prompt_file=str(prompt_file))

        # Assert
        assert loader.get_system_prompt() == prompt_content
        assert loader.get_role_name() == "File Assistant"

    def test_prompt_loader_file_not_found(self) -> None:
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ - fallback –Ω–∞ —Ç–µ–∫—Å—Ç"""
        # Arrange
        non_existent_file = "non_existent_prompt.txt"
        fallback_text = "–†–æ–ª—å: Fallback Assistant\n\nFallback prompt."

        # Act
        loader = PromptLoader(prompt_text=fallback_text, prompt_file=non_existent_file)

        # Assert: –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback —Ç–µ–∫—Å—Ç
        assert loader.get_system_prompt() == fallback_text
        assert loader.get_role_name() == "Fallback Assistant"


class TestPromptLoaderParsing:
    """–¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""

    def test_prompt_loader_parse_role_name(self) -> None:
        """–¢–µ—Å—Ç: –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ '–†–æ–ª—å: ...'"""
        # Arrange
        prompt_with_role = "–†–æ–ª—å: Python Expert\n\nYou are a Python expert."

        # Act
        loader = PromptLoader(prompt_text=prompt_with_role)

        # Assert
        assert loader.get_role_name() == "Python Expert"

    def test_prompt_loader_parse_role_missing(self) -> None:
        """–¢–µ—Å—Ç: –ø—Ä–æ–º–ø—Ç –±–µ–∑ —Å—Ç—Ä–æ–∫–∏ '–†–æ–ª—å:' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        # Arrange
        prompt_without_role = "You are a helpful assistant without explicit role."

        # Act
        loader = PromptLoader(prompt_text=prompt_without_role)

        # Assert
        assert loader.get_role_name() == "AI Assistant"

    def test_prompt_loader_get_system_prompt(self) -> None:
        """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM"""
        # Arrange
        full_prompt = """–†–æ–ª—å: Test Assistant

You are a test assistant with multiple lines.

Key features:
- Feature 1
- Feature 2

End of prompt."""

        # Act
        loader = PromptLoader(prompt_text=full_prompt)

        # Assert
        assert loader.get_system_prompt() == full_prompt

    def test_prompt_loader_get_role_description(self) -> None:
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /role"""
        # Arrange
        prompt = """–†–æ–ª—å: Code Reviewer

–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ code review.

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- SOLID, DRY, KISS
- Type hints –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"""

        # Act
        loader = PromptLoader(prompt_text=prompt)
        description = loader.get_role_description()

        # Assert
        assert "ü§ñ –ú–æ—è —Ä–æ–ª—å: Code Reviewer" in description
        assert "–æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in description

    def test_prompt_loader_priority_file_over_text(self, tmp_path: Path) -> None:
        """–¢–µ—Å—Ç: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª–∞ –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–±–æ–∏—Ö"""
        # Arrange
        prompt_file = tmp_path / "priority_test.txt"
        file_content = "–†–æ–ª—å: File Priority\n\nFile has priority."
        prompt_file.write_text(file_content, encoding="utf-8")

        text_content = "–†–æ–ª—å: Text Priority\n\nText should be ignored."

        # Act
        loader = PromptLoader(prompt_text=text_content, prompt_file=str(prompt_file))

        # Assert: –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
        assert loader.get_system_prompt() == file_content
        assert loader.get_role_name() == "File Priority"
