"""–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è telegram_bot"""

from unittest.mock import AsyncMock, MagicMock

import pytest
from aiogram.types import Message, User

from src.telegram_bot import (
    CLEAR_TEXT,
    ERROR_MESSAGE_GENERAL,
    HELP_TEXT,
    MAX_MESSAGE_LENGTH,
    WELCOME_TEXT,
    TelegramBot,
)


@pytest.fixture
def mock_conversation_manager():
    """–ú–æ–∫ ConversationManager"""
    manager = AsyncMock()
    manager.process_message = AsyncMock(return_value="Test response from LLM")
    manager.clear_history = MagicMock()
    return manager


@pytest.fixture
def mock_message():
    """–ú–æ–∫ Message –æ—Ç Telegram"""
    message = MagicMock(spec=Message)
    message.from_user = MagicMock(spec=User)
    message.from_user.id = 12345
    message.from_user.username = "testuser"
    message.from_user.first_name = "Test"
    message.answer = AsyncMock()
    message.text = "Hello bot"
    return message


@pytest.fixture
def telegram_bot(mock_conversation_manager):
    """–§–∏–∫—Å—Ç—É—Ä–∞ TelegramBot —Å –º–æ–∫–æ–º ConversationManager"""
    # –ú–æ–∫–∏—Ä—É–µ–º Bot –∏ Dispatcher, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ
    with pytest.MonkeyPatch.context() as mp:
        mock_bot = MagicMock()
        mock_dp = MagicMock()
        mock_dp.message = MagicMock()
        mock_dp.message.register = MagicMock()

        mp.setattr("src.telegram_bot.Bot", lambda token: mock_bot)
        mp.setattr("src.telegram_bot.Dispatcher", lambda: mock_dp)

        bot = TelegramBot("fake_token", mock_conversation_manager)
        return bot


def test_get_user_info(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –º–µ—Ç–æ–¥ _get_user_info –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id, username = telegram_bot._get_user_info(mock_message)

    assert user_id == 12345
    assert username == "testuser"


def test_get_user_info_no_username(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: _get_user_info –∏—Å–ø–æ–ª—å–∑—É–µ—Ç first_name –µ—Å–ª–∏ –Ω–µ—Ç username"""
    mock_message.from_user.username = None

    user_id, username = telegram_bot._get_user_info(mock_message)

    assert user_id == 12345
    assert username == "Test"


def test_get_user_info_no_user(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: _get_user_info –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç ValueError –µ—Å–ª–∏ –Ω–µ—Ç from_user"""
    mock_message.from_user = None

    with pytest.raises(ValueError, match="Message has no user information"):
        telegram_bot._get_user_info(mock_message)


@pytest.mark.asyncio
async def test_cmd_start(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    await telegram_bot.cmd_start(mock_message)

    mock_message.answer.assert_called_once_with(WELCOME_TEXT)


@pytest.mark.asyncio
async def test_cmd_help(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await telegram_bot.cmd_help(mock_message)

    mock_message.answer.assert_called_once_with(HELP_TEXT)


@pytest.mark.asyncio
async def test_cmd_clear(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /clear –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é"""
    await telegram_bot.cmd_clear(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞
    telegram_bot.conversation_manager.clear_history.assert_called_once_with(12345)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    mock_message.answer.assert_called_once_with(CLEAR_TEXT)


@pytest.mark.asyncio
async def test_handle_empty_message(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è"""
    mock_message.text = "   "

    await telegram_bot.handle_message(mock_message)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    telegram_bot.conversation_manager.process_message.assert_not_called()
    mock_message.answer.assert_not_called()


@pytest.mark.asyncio
async def test_handle_none_message(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: None —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è"""
    mock_message.text = None

    await telegram_bot.handle_message(mock_message)

    telegram_bot.conversation_manager.process_message.assert_not_called()
    mock_message.answer.assert_not_called()


@pytest.mark.asyncio
async def test_handle_long_message(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è"""
    mock_message.text = "a" * (MAX_MESSAGE_LENGTH + 1)

    await telegram_bot.handle_message(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    telegram_bot.conversation_manager.process_message.assert_not_called()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞
    mock_message.answer.assert_called_once()
    error_text = mock_message.answer.call_args[0][0]
    assert "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ" in error_text.lower()


@pytest.mark.asyncio
async def test_handle_message_success(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    mock_message.text = "Hello bot"

    await telegram_bot.handle_message(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    telegram_bot.conversation_manager.process_message.assert_called_once_with(12345, "Hello bot")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
    mock_message.answer.assert_called_once_with("Test response from LLM")


@pytest.mark.asyncio
async def test_handle_message_error(telegram_bot, mock_message):
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ConversationManager"""
    telegram_bot.conversation_manager.process_message.side_effect = Exception("Test error")
    mock_message.text = "Hello bot"

    await telegram_bot.handle_message(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞
    mock_message.answer.assert_called_once_with(ERROR_MESSAGE_GENERAL)


class TestCmdRole:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /role"""

    @pytest.mark.asyncio
    async def test_cmd_role_default_prompt(self, telegram_bot, mock_message) -> None:
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /role —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        # Arrange: –º–æ–∫–∏—Ä—É–µ–º get_role_description –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        telegram_bot.conversation_manager.get_role_description = MagicMock(
            return_value="ü§ñ –ú–æ—è —Ä–æ–ª—å: AI Assistant\n\nYou are a helpful AI assistant."
        )

        # Act
        await telegram_bot.cmd_role(mock_message)

        # Assert
        mock_message.answer.assert_called_once()
        response_text = mock_message.answer.call_args[0][0]
        assert "ü§ñ –ú–æ—è —Ä–æ–ª—å: AI Assistant" in response_text
        assert "helpful AI assistant" in response_text

    @pytest.mark.asyncio
    async def test_cmd_role_specialized_prompt(self, telegram_bot, mock_message) -> None:
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /role —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        # Arrange: –º–æ–∫–∏—Ä—É–µ–º get_role_description –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        specialized_description = """ü§ñ –ú–æ—è —Ä–æ–ª—å: Python Code Reviewer Expert

–¢—ã - –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 10+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞."""

        telegram_bot.conversation_manager.get_role_description = MagicMock(
            return_value=specialized_description
        )

        # Act
        await telegram_bot.cmd_role(mock_message)

        # Assert
        mock_message.answer.assert_called_once()
        response_text = mock_message.answer.call_args[0][0]
        assert "Python Code Reviewer Expert" in response_text
        assert "–æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in response_text

    @pytest.mark.asyncio
    async def test_cmd_role_formatting(self, telegram_bot, mock_message) -> None:
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã /role"""
        # Arrange
        role_description = "ü§ñ –ú–æ—è —Ä–æ–ª—å: Test Role\n\nTest description."
        telegram_bot.conversation_manager.get_role_description = MagicMock(
            return_value=role_description
        )

        # Act
        await telegram_bot.cmd_role(mock_message)

        # Assert
        mock_message.answer.assert_called_once_with(role_description)

    @pytest.mark.asyncio
    async def test_cmd_role_user_info_logging(self, telegram_bot, mock_message) -> None:
        """–¢–µ—Å—Ç: –∫–æ–º–∞–Ω–¥–∞ /role –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # Arrange
        telegram_bot.conversation_manager.get_role_description = MagicMock(
            return_value="Test role description"
        )

        # Act
        await telegram_bot.cmd_role(mock_message)

        # Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_info
        # (–º–µ—Ç–æ–¥ _get_user_info –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ cmd_role)
        mock_message.answer.assert_called_once()
