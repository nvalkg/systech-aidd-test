---
alwaysApply: false
---
# Workflow TDD - Test-Driven Development

> **–ë–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** [vision.md](../../docs/vision.md) | [conventions.mdc](conventions.mdc) | [qa_conventions.mdc](qa_conventions.mdc) | [roadmap.md](../../docs/roadmap.md)

## üéØ –ü—Ä–∏–Ω—Ü–∏–ø TDD

**Test First - –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç, –ø–æ—Ç–æ–º –∫–æ–¥**

```
üî¥ RED ‚Üí üü¢ GREEN ‚Üí üîµ REFACTOR ‚Üí üîÅ REPEAT
```

**–ü—Ä–∞–≤–∏–ª–∞ TDD:**
1. **–ù–ï –ø–∏—à–∏ –∫–æ–¥** –±–µ–∑ failing —Ç–µ—Å—Ç–∞
2. **–ù–ï –ø–∏—à–∏ –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–∞**, —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
3. **–ù–ï –ø–∏—à–∏ –±–æ–ª—å—à–µ –∫–æ–¥–∞**, —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
4. **–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏** —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–µ–ª–µ–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

---

## üîÑ TDD —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –§–∞–∑–∞ üî¥ RED - –ü–∏—à–µ–º failing —Ç–µ—Å—Ç

**–¶–µ–ª—å:** –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç

**–®–∞–≥–∏:**
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
2. –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
3. –ó–∞–ø—É—Å—Ç–∏ `make test` ‚Üí —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å (RED)
4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ

**–®–∞–±–ª–æ–Ω RED —Ç–µ—Å—Ç–∞:**
```python
# tests/test_<module>.py

@pytest.mark.asyncio
async def test_<feature_name>_<scenario>() -> None:
    """–¢–µ—Å—Ç: <–æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è>"""
    # Arrange: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    instance = MyClass(...)
    test_input = "test data"
    expected_output = "expected result"

    # Act: –≤—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞
    result = await instance.my_method(test_input)

    # Assert: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    assert result == expected_output
```

**–ü—Ä–æ–≤–µ—Ä–∫–∞ RED:**
```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç - –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å
pytest tests/test_<module>.py::test_<feature_name> -v

# –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
# FAILED tests/test_<module>.py::test_<feature_name> - AttributeError: ...
# –∏–ª–∏
# FAILED tests/test_<module>.py::test_<feature_name> - AssertionError: ...
```

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RED:**
- ‚úÖ –¢–µ—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω –∏ –ø–∞–¥–∞–µ—Ç
- ‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è –ø–æ–Ω—è—Ç–Ω–∞ (–Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
- ‚úÖ –¢–µ—Å—Ç –∏–º–µ–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –∏ docstring
- ‚úÖ –¢–µ—Å—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)

---

### –§–∞–∑–∞ üü¢ GREEN - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

**–¶–µ–ª—å:** –°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç –∑–µ–ª–µ–Ω—ã–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º

**–®–∞–≥–∏:**
1. –†–µ–∞–ª–∏–∑—É–π –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
2. –ù–µ –¥—É–º–∞–π –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ - —Ñ–æ–∫—É—Å –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
3. –ó–∞–ø—É—Å—Ç–∏ `make test` ‚Üí —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ (GREEN)
4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ç–æ–∂–µ –ø—Ä–æ—Ö–æ–¥—è—Ç

**–®–∞–±–ª–æ–Ω GREEN —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:**
```python
# src/<module>.py

class MyClass:
    async def my_method(self, input_data: str) -> str:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç
        return "expected result"  # –•–∞—Ä–¥–∫–æ–¥? –û–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞!
```

**–ü—Ä–æ–≤–µ—Ä–∫–∞ GREEN:**
```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
pytest tests/test_<module>.py::test_<feature_name> -v
# ‚Üí PASSED

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª—è
pytest tests/test_<module>.py -v
# ‚Üí All PASSED

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
make test
# ‚Üí 42/42 tests passed
```

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ GREEN:**
- ‚úÖ –ù–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
- ‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- ‚úÖ Coverage –Ω–µ —É–ø–∞–ª
- ‚úÖ –ö–æ–¥ –º–∏–Ω–∏–º–∞–ª–µ–Ω (–º–æ–∂–Ω–æ —Ö–∞—Ä–¥–∫–æ–¥, –º–æ–∂–Ω–æ if/else)

---

### –§–∞–∑–∞ üîµ REFACTOR - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞

**–¶–µ–ª—å:** –£–ª—É—á—à–∏—Ç—å –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è

**–®–∞–≥–∏:**
1. –£–ª—É—á—à–∏ –∫–æ–¥ (SOLID, DRY, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å)
2. –ó–∞–ø—É—Å—Ç–∏ `make test` ‚Üí –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∑–µ–ª–µ–Ω—ã–º–∏
3. –ó–∞–ø—É—Å—Ç–∏ `make quality` ‚Üí –ø—Ä–æ–≤–µ—Ä—å lint, typecheck
4. –ü–æ–≤—Ç–æ—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

**–®–∞–±–ª–æ–Ω REFACTOR:**
```python
# src/<module>.py

class MyClass:
    async def my_method(self, input_data: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º SOLID –∏ DRY"""
        # –ó–∞–º–µ–Ω—è–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        validated_input = self._validate_input(input_data)
        processed_data = self._process_data(validated_input)
        return self._format_output(processed_data)

    def _validate_input(self, data: str) -> str:
        """SRP: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if not data or not data.strip():
            raise ValueError("Input cannot be empty")
        return data.strip()

    def _process_data(self, data: str) -> str:
        """SRP: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –†–µ–∞–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        return data.upper()

    def _format_output(self, data: str) -> str:
        """SRP: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return f"Processed: {data}"
```

**–ü—Ä–æ–≤–µ—Ä–∫–∞ REFACTOR:**
```bash
# –í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
make test
# ‚Üí 42/42 tests passed, coverage 95%

# –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ª–∏—á–Ω—ã–º
make quality
# ‚Üí Format: ‚úì Lint: ‚úì Typecheck: ‚úì Test: ‚úì
```

**–¢–∏–ø—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:**
- **Extract Method** - –≤—ã–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
- **Extract Class** - —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å (SRP)
- **Remove Duplication** - —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (DRY)
- **Rename** - —É–ª—É—á—à–∏—Ç—å –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö/–º–µ—Ç–æ–¥–æ–≤
- **Add Type Hints** - –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
- **Simplify** - —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ REFACTOR:**
- ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- ‚úÖ Coverage –Ω–µ —É–ø–∞–ª (–ª—É—á—à–µ –≤—ã—Ä–æ—Å)
- ‚úÖ `make lint` ‚Üí 0 –æ—à–∏–±–æ–∫
- ‚úÖ `make typecheck` ‚Üí 0 –æ—à–∏–±–æ–∫
- ‚úÖ –ö–æ–¥ —á–∏—Ç–∞–µ–º—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π
- ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã SOLID –∏ DRY –ø—Ä–∏–Ω—Ü–∏–ø—ã

---

## üìã TDD Workflow –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏

### –≠—Ç–∞–ø 1Ô∏è‚É£: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º:**
- [ ] –ò–∑—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ roadmap.md –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Å–∫–ª–∏—Å—Ç–∞ —Å–ø—Ä–∏–Ω—Ç–∞
- [ ] –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- [ ] –î–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
- [ ] –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ (RED —Ñ–∞–∑–∞)
- [ ] **–î–æ–∂–¥–∞—Ç—å—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è**

**–§–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**
```markdown
## –ò—Ç–µ—Ä–∞—Ü–∏—è N: [–ù–∞–∑–≤–∞–Ω–∏–µ]

### –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
1. **Feature A** - –æ–ø–∏—Å–∞–Ω–∏–µ
   - –¢–µ—Å—Ç: `test_feature_a_success()`
   - –¢–µ—Å—Ç: `test_feature_a_invalid_input()`
   - –¢–µ—Å—Ç: `test_feature_a_empty_data()`

2. **Feature B** - –æ–ø–∏—Å–∞–Ω–∏–µ
   - –¢–µ—Å—Ç: `test_feature_b_success()`
   - –¢–µ—Å—Ç: `test_feature_b_api_error()`

### –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (TDD)
1. Feature A ‚Üí üî¥ RED ‚Üí üü¢ GREEN ‚Üí üîµ REFACTOR
2. Feature B ‚Üí üî¥ RED ‚Üí üü¢ GREEN ‚Üí üîµ REFACTOR

–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å?
```

---

### –≠—Ç–∞–ø 2Ô∏è‚É£: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è (TDD —Ü–∏–∫–ª)

#### üî¥ RED: –ù–∞–ø–∏—Å–∞—Ç—å failing —Ç–µ—Å—Ç

**–î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:**

1. **–°–æ–∑–¥–∞–π/–æ—Ç–∫—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:**
```bash
vim tests/test_<module>.py
```

2. **–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç:**
```python
@pytest.mark.asyncio
async def test_new_feature_success() -> None:
    """–¢–µ—Å—Ç: –ù–æ–≤–∞—è —Ñ–∏—á–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    # Arrange
    instance = MyClass(...)
    test_data = "input"

    # Act
    result = await instance.new_feature(test_data)

    # Assert
    assert result == "expected"
```

3. **–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç (–¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å):**
```bash
pytest tests/test_<module>.py::test_new_feature_success -v
# Expected: FAILED (AttributeError –∏–ª–∏ AssertionError)
```

4. **–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∏—á–∏–Ω—É –ø–∞–¥–µ–Ω–∏—è:**
- ‚úÖ –ú–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Üí —Ö–æ—Ä–æ—à–æ
- ‚úÖ –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí —Ö–æ—Ä–æ—à–æ
- ‚ùå –¢–µ—Å—Ç —Å–∞–º —Å –æ—à–∏–±–∫–æ–π ‚Üí –∏—Å–ø—Ä–∞–≤—å —Ç–µ—Å—Ç

**üî¥ RED –≥–æ—Ç–æ–≤–æ ‚úì**

---

#### üü¢ GREEN: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º

1. **–°–æ–∑–¥–∞–π/–æ—Ç–∫—Ä–æ–π —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º:**
```bash
vim src/<module>.py
```

2. **–ù–∞–ø–∏—à–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é:**
```python
async def new_feature(self, input_data: str) -> str:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"""
    # –°–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    return "expected"  # –•–∞—Ä–¥–∫–æ–¥ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ - –û–ö!
```

3. **–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏):**
```bash
pytest tests/test_<module>.py::test_new_feature_success -v
# Expected: PASSED
```

4. **–ó–∞–ø—É—Å—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã:**
```bash
make test
# Expected: All tests PASSED
```

**üü¢ GREEN –≥–æ—Ç–æ–≤–æ ‚úì**

---

#### üîµ REFACTOR: –£–ª—É—á—à–∏—Ç—å –∫–æ–¥

1. **–ó–∞–º–µ–Ω–∏ —Ö–∞—Ä–¥–∫–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π:**
```python
async def new_feature(self, input_data: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"""
    if not input_data:
        raise ValueError("Input required")

    processed = self._process(input_data)
    return self._format(processed)

def _process(self, data: str) -> str:
    """SRP: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return data.upper()

def _format(self, data: str) -> str:
    """SRP: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    return f"Result: {data}"
```

2. **–î–æ–±–∞–≤—å type hints:**
```python
async def new_feature(self, input_data: str) -> str:
    """–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"""
    ...
```

3. **–ó–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:**
```bash
# –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
make test
# ‚Üí PASSED

# –õ–∏–Ω—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–≤–æ–ª–µ–Ω
make lint
# ‚Üí All checks passed!

# Type checker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–≤–æ–ª–µ–Ω
make typecheck
# ‚Üí Success: no issues found
```

4. **–ü—Ä–æ–≤–µ—Ä—å coverage:**
```bash
pytest tests/test_<module>.py --cov=src.<module> --cov-report=term-missing
# ‚Üí 100% coverage –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
```

**üîµ REFACTOR –≥–æ—Ç–æ–≤–æ ‚úì**

---

#### üîÅ REPEAT: –°–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è

**–ü–æ–≤—Ç–æ—Ä–∏ —Ü–∏–∫–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:**
1. üî¥ RED ‚Üí –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
2. üü¢ GREEN ‚Üí –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
3. üîµ REFACTOR ‚Üí —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞

**–ö–æ–≥–¥–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã:**
```bash
# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
make quality

# –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
# ‚úì Format check passed
# ‚úì Lint check passed
# ‚úì Type check passed
# ‚úì Tests: 42/42 passed
# ‚úì Coverage: 95%
```

---

### –≠—Ç–∞–ø 3Ô∏è‚É£: –ü—Ä–æ–≤–µ—Ä–∫–∞

**–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è TDD —Ü–∏–∫–ª–æ–≤:**

1. **–ó–∞–ø—É—Å—Ç–∏ –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É:**
```bash
make quality
```

2. **–ü—Ä–æ–≤–µ—Ä—å coverage:**
```bash
make test
# –£–±–µ–¥–∏—Å—å: coverage >= 80% (–ª—É—á—à–µ >90%)
```

3. **–ü—Ä–æ–≤–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:**
- [ ] Docstrings –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
- [ ] Type hints –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
- [ ] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏

4. **–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
```markdown
## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏ N

### –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- ‚úÖ Feature A: 3 —Ç–µ—Å—Ç–∞, 100% coverage
- ‚úÖ Feature B: 2 —Ç–µ—Å—Ç–∞, 100% coverage

### –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- Tests: 47/47 passed (+5 –Ω–æ–≤—ã—Ö)
- Coverage: 96% (–±—ã–ª–æ 95%)
- Lint: All checks passed
- Typecheck: Success

### –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
\`\`\`bash
make quality
pytest tests/test_<module>.py -v
\`\`\`
```

5. **–î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**

---

### –≠—Ç–∞–ø 4Ô∏è‚É£: –§–∏–∫—Å–∞—Ü–∏—è

**–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:**

1. **–û–±–Ω–æ–≤–∏—Ç—å roadmap.md –∏ —Ç–∞—Å–∫–ª–∏—Å—Ç —Å–ø—Ä–∏–Ω—Ç–∞:**
```markdown
| –ò—Ç–µ—Ä–∞—Ü–∏—è | –°—Ç–∞—Ç—É—Å | –û–ø–∏—Å–∞–Ω–∏–µ | –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è |
|----------|--------|----------|-----------------|
| N | ‚úÖ Done | –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ A, B | 2025-10-11 |
```

2. **–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç:**
```bash
git add .
git commit -m "feat: iteration N - feature A and B

- –î–æ–±–∞–≤–ª–µ–Ω–∞ feature A —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
- –î–æ–±–∞–≤–ª–µ–Ω–∞ feature B —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: 96%
- TDD: 5 –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤, –≤—Å–µ –ø—Ä–æ—Ö–æ–¥—è—Ç"
```

3. **–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏**

---

## üéØ TDD –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã

### –ü—Ä–∏–º–µ—Ä 1: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

#### üî¥ RED Phase
```python
# tests/test_config.py

def test_config_parse_bool_valid_true(valid_env, monkeypatch):
    """–¢–µ—Å—Ç: –ø–∞—Ä—Å–∏–Ω–≥ –±—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 'true'"""
    monkeypatch.setenv("ENABLE_FEATURE", "true")

    config = Config()
    result = config.parse_bool("ENABLE_FEATURE", default=False)

    assert result is True

def test_config_parse_bool_invalid(valid_env, monkeypatch):
    """–¢–µ—Å—Ç: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –±—É–ª–µ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏"""
    monkeypatch.setenv("ENABLE_FEATURE", "not_a_bool")

    with pytest.raises(ValueError, match="–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"):
        config = Config()
        config.parse_bool("ENABLE_FEATURE", default=False)
```

**–ó–∞–ø—É—Å–∫:**
```bash
pytest tests/test_config.py::test_config_parse_bool_valid_true -v
# ‚Üí FAILED: AttributeError: 'Config' object has no attribute 'parse_bool'
```

‚úÖ **RED —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞** - —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ

---

#### üü¢ GREEN Phase
```python
# src/config.py

class Config:
    def parse_bool(self, key: str, default: bool = False) -> bool:
        """–ü–∞—Ä—Å–∏–Ω–≥ –±—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ env"""
        value = os.getenv(key)
        if value is None:
            return default

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        if value.lower() == "true":
            return True
        elif value.lower() == "false":
            return False
        else:
            raise ValueError(f"{key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (true/false)")
```

**–ó–∞–ø—É—Å–∫:**
```bash
pytest tests/test_config.py::test_config_parse_bool_valid_true -v
# ‚Üí PASSED

pytest tests/test_config.py::test_config_parse_bool_invalid -v
# ‚Üí PASSED

make test
# ‚Üí All tests PASSED
```

‚úÖ **GREEN —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞** - —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç

---

#### üîµ REFACTOR Phase
```python
# src/config.py

class Config:
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    TRUE_VALUES = {"true", "1", "yes", "on"}
    FALSE_VALUES = {"false", "0", "no", "off"}

    def parse_bool(self, key: str, default: bool = False) -> bool:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –±—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.

        Args:
            key: –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            bool: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        Raises:
            ValueError: –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤—ã–º
        """
        value = os.getenv(key)
        if value is None:
            return default

        value_lower = value.lower().strip()

        if value_lower in self.TRUE_VALUES:
            return True
        elif value_lower in self.FALSE_VALUES:
            return False
        else:
            valid_values = ", ".join(self.TRUE_VALUES | self.FALSE_VALUES)
            raise ValueError(
                f"{key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º ({valid_values}), "
                f"–ø–æ–ª—É—á–µ–Ω–æ: {value}"
            )
```

**–ü—Ä–æ–≤–µ—Ä–∫–∞:**
```bash
make test
# ‚Üí All tests PASSED

make lint
# ‚Üí All checks passed!

make typecheck
# ‚Üí Success: no issues found
```

‚úÖ **REFACTOR —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞** - –∫–æ–¥ —É–ª—É—á—à–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç

---

### –ü—Ä–∏–º–µ—Ä 2: Async –º–µ—Ç–æ–¥ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º API

#### üî¥ RED Phase
```python
# tests/test_llm_client.py

@pytest.mark.asyncio
async def test_get_response_handles_none_content(llm_client: LLMClient) -> None:
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –≤ content –æ—Ç–≤–µ—Ç–∞"""
    # Arrange: –º–æ–∫ —Å None content
    mock_response = Mock(
        choices=[Mock(message=Mock(content=None))],
        usage=Mock(total_tokens=10)
    )

    # Act & Assert
    with patch.object(
        llm_client.client.chat.completions, "create", new_callable=AsyncMock
    ) as mock_create:
        mock_create.return_value = mock_response

        result = await llm_client.get_response([{"role": "user", "content": "Hi"}])

        # None –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        assert result == ""
```

**–ó–∞–ø—É—Å–∫:**
```bash
pytest tests/test_llm_client.py::test_get_response_handles_none_content -v
# ‚Üí FAILED: AssertionError: assert None == ""
```

‚úÖ **RED —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

---

#### üü¢ GREEN Phase
```python
# src/llm_client.py

async def get_response(self, messages: list[dict[str, Any]]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM"""
    response = await self.client.chat.completions.create(
        model=self.model,
        messages=messages,
        max_tokens=self.max_tokens,
        temperature=self.temperature,
    )

    content = response.choices[0].message.content

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if content is None:
        content = ""

    return content
```

**–ó–∞–ø—É—Å–∫:**
```bash
pytest tests/test_llm_client.py::test_get_response_handles_none_content -v
# ‚Üí PASSED

make test
# ‚Üí All tests PASSED
```

‚úÖ **GREEN —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

---

#### üîµ REFACTOR Phase
```python
# src/llm_client.py

async def get_response(self, messages: list[dict[str, Any]]) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM —á–µ—Ä–µ–∑ OpenRouter API.

    Args:
        messages: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç LLM (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ None)

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
    """
    try:
        response = await self.client.chat.completions.create(
            model=self.model,
            messages=messages,  # type: ignore[arg-type]
            max_tokens=self.max_tokens,
            temperature=self.temperature,
        )

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ content —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None
        content = response.choices[0].message.content
        result = content if content is not None else ""

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        usage = response.usage
        if usage:
            logger.info(f"LLM response: {usage.total_tokens} tokens used")

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {e}")
        raise
```

**–ü—Ä–æ–≤–µ—Ä–∫–∞:**
```bash
make quality
# ‚Üí All checks passed!
```

‚úÖ **REFACTOR —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

---

## üöÄ TDD Cheatsheet

### –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

```bash
# 1. RED: –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç
vim tests/test_<module>.py
# –î–æ–±–∞–≤—å: def test_new_feature_success(): ...

# 2. –ó–∞–ø—É—Å—Ç–∏ (–¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å)
pytest tests/test_<module>.py::test_new_feature_success -v
# ‚Üí FAILED ‚úì

# 3. GREEN: –†–µ–∞–ª–∏–∑—É–π –º–∏–Ω–∏–º—É–º
vim src/<module>.py
# –î–æ–±–∞–≤—å: def new_feature(): return "expected"

# 4. –ó–∞–ø—É—Å—Ç–∏ (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
pytest tests/test_<module>.py::test_new_feature_success -v
# ‚Üí PASSED ‚úì

# 5. REFACTOR: –£–ª—É—á—à–∏ –∫–æ–¥
vim src/<module>.py
# –ü—Ä–∏–º–µ–Ω–∏ SOLID, DRY, –¥–æ–±–∞–≤—å type hints

# 6. –ü—Ä–æ–≤–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ
make quality
# ‚Üí All checks passed ‚úì
```

### –ö–æ–º–∞–Ω–¥—ã –¥–ª—è TDD workflow

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
pytest tests/test_<module>.py::test_<name> -v

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª—è
pytest tests/test_<module>.py -v

# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å coverage
pytest tests/test_<module>.py --cov=src.<module> --cov-report=term-missing

# Watch mode (–∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
pytest-watch tests/test_<module>.py

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
make quality
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∑ TDD

**üî¥ RED checklist:**
- [ ] –¢–µ—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω —Å –ø–æ–Ω—è—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º
- [ ] Docstring –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π
- [ ] –¢–µ—Å—Ç –ø–∞–¥–∞–µ—Ç (`pytest ... -v` ‚Üí FAILED)
- [ ] –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è (–Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏/–Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)

**üü¢ GREEN checklist:**
- [ ] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞
- [ ] –ù–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç (`pytest ... -v` ‚Üí PASSED)
- [ ] –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç (`make test` ‚Üí all PASSED)
- [ ] Coverage –Ω–µ —É–ø–∞–ª

**üîµ REFACTOR checklist:**
- [ ] –ö–æ–¥ —É–ª—É—á—à–µ–Ω (SOLID, DRY)
- [ ] Type hints –¥–æ–±–∞–≤–ª–µ–Ω—ã
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç (`make test` ‚Üí all PASSED)
- [ ] Lint –±–µ–∑ –æ—à–∏–±–æ–∫ (`make lint` ‚Üí passed)
- [ ] Typecheck –±–µ–∑ –æ—à–∏–±–æ–∫ (`make typecheck` ‚Üí success)
- [ ] Coverage –≤—ã—Ä–æ—Å –∏–ª–∏ –æ—Å—Ç–∞–ª—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ

---

## üéì TDD Best Practices

### –ó–æ–ª–æ—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞

1. **–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å RED**
   - –ù–µ –ø–∏—à–∏ –∫–æ–¥ –±–µ–∑ failing —Ç–µ—Å—Ç–∞
   - –¢–µ—Å—Ç –ø–∞–¥–∞–µ—Ç = —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å

2. **GREEN - –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞**
   - –•–∞—Ä–¥–∫–æ–¥? –û–ö –¥–ª—è –Ω–∞—á–∞–ª–∞
   - If/else? –û—Ç–ª–∏—á–Ω–æ
   - –ì–ª–∞–≤–Ω–æ–µ - —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç

3. **REFACTOR –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞**
   - –¢–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ = –º–æ–∂–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å
   - –°–ª–æ–º–∞–ª —Ç–µ—Å—Ç—ã? –û—Ç–∫–∞—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   - –¢–µ—Å—Ç—ã - —Ç–≤–æ—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞

4. **–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏**
   - –û–¥–∏–Ω —Ç–µ—Å—Ç = –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
   - –û–¥–∏–Ω –∫–æ–º–º–∏—Ç = –æ–¥–∏–Ω TDD —Ü–∏–∫–ª
   - –õ–µ–≥—á–µ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å, –ª–µ–≥—á–µ —Ä–µ–≤—å—é–∏—Ç—å

5. **–¢–µ—Å—Ç–∏—Ä—É–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é**
   - –¢–µ—Å—Ç–∏—Ä—É–π public API
   - –ù–µ —Ç–µ—Å—Ç–∏—Ä—É–π private –º–µ—Ç–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é
   - –§–æ–∫—É—Å –Ω–∞ "—á—Ç–æ", –∞ –Ω–µ "–∫–∞–∫"

### –ö–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å TDD

‚úÖ **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:**
- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤
- –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- –ö—Ä–∏—Ç–∏—á–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞

‚ö†Ô∏è **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ:**
- –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (spike solutions)
- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

‚ùå **–ù–µ –Ω—É–∂–Ω–æ:**
- –¢—Ä–∏–≤–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ (getters/setters)
- –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–æ–Ω–∏ —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã)
- UI layout (–ª—É—á—à–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)

### –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏

‚ùå **–ü–∏—à–µ—à—å –∫–æ–¥ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º**
```python
# –ü–õ–û–•–û: —Å–Ω–∞—á–∞–ª–∞ –∫–æ–¥, –ø–æ—Ç–æ–º —Ç–µ—Å—Ç
def new_feature():  # –ù–∞–ø–∏—Å–∞–ª –∫–æ–¥
    return "result"

def test_new_feature():  # –ü–æ—Ç–æ–º —Ç–µ—Å—Ç
    assert new_feature() == "result"
```

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ: —Ç–µ—Å—Ç –ø–µ—Ä–µ–¥ –∫–æ–¥–æ–º**
```python
# –•–û–†–û–®–û: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç
def test_new_feature():  # üî¥ RED
    assert new_feature() == "result"

# –ü–æ—Ç–æ–º –∫–æ–¥
def new_feature():  # üü¢ GREEN
    return "result"
```

---

‚ùå **–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —à–∞–≥**
```python
# –ü–õ–û–•–û: —Å—Ä–∞–∑—É —Å–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
def test_calculate_complex():
    result = calculator.calculate(
        operations=["add", "multiply", "divide"],
        values=[1, 2, 3, 4, 5]
    )
    assert result == 42
```

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ: –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏**
```python
# –•–û–†–û–®–û: –Ω–∞—á–Ω–∏ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ
def test_calculate_add():
    result = calculator.add(1, 2)
    assert result == 3

def test_calculate_multiply():
    result = calculator.multiply(2, 3)
    assert result == 6

# –ü–æ—Ç–æ–º –∫–æ–º–±–∏–Ω–∏—Ä—É–π
def test_calculate_chain():
    result = calculator.chain([("add", 1, 2), ("multiply", 3)])
    assert result == 9
```

---

‚ùå **–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ RED**
```python
# –ü–õ–û–•–û: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–≥–¥–∞ —Ç–µ—Å—Ç—ã –∫—Ä–∞—Å–Ω—ã–µ
def test_new_feature():
    assert new_feature() == "result"
# ‚Üí FAILED

# –ù–∞—á–∏–Ω–∞–µ—à—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥... ‚ùå
```

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –Ω–∞ GREEN**
```python
# –•–û–†–û–®–û: —Å–Ω–∞—á–∞–ª–∞ GREEN
def test_new_feature():
    assert new_feature() == "result"

def new_feature():
    return "result"  # –ú–∏–Ω–∏–º—É–º
# ‚Üí PASSED ‚úì

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å ‚úì
```

---

## üìä –ú–µ—Ç—Ä–∏–∫–∏ TDD

### –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å

**–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ TDD —Ü–∏–∫–ª–∞:**
```bash
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
pytest --collect-only | grep "test session starts"
# Before: 42 tests
# After: 45 tests (+3)

# Coverage
make test
# Before: 94%
# After: 96% (+2%)

# –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
pytest --durations=10
# –í—Å–µ —Ç–µ—Å—Ç—ã < 1s = –æ—Ç–ª–∏—á–Ω–æ
```

**–¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
- Tests: +3-5 —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
- Coverage: >95% –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
- Speed: <1s –Ω–∞ unit —Ç–µ—Å—Ç
- Quality: 0 lint errors, 0 type errors

---

## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD

### GitHub Actions –¥–ª—è TDD

**–ü—Ä–∏ –∫–∞–∂–¥–æ–º push:**
```yaml
# .github/workflows/quality.yml
- name: Run tests
  run: |
    make test
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ TDD —Ç–µ—Å—Ç—ã
```

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è merge:**
- ‚úÖ All tests passed
- ‚úÖ Coverage >= 95%
- ‚úÖ No lint errors
- ‚úÖ No type errors

### –õ–æ–∫–∞–ª—å–Ω—ã–π pre-commit

**–ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∫–æ–º–º–∏—Ç–æ–º:**
```bash
# –í –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
git add .
make quality  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
git commit -m "feat: new feature via TDD"
```

**–ï—Å–ª–∏ `make quality` —É–ø–∞–ª:**
```bash
# –ù–µ –∫–æ–º–º–∏—Ç—å! –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å
# 1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —É–ø–∞–ª–æ
make test      # –¢–µ—Å—Ç—ã?
make lint      # –õ–∏–Ω—Ç–µ—Ä?
make typecheck # –¢–∏–ø—ã?

# 2. –ò—Å–ø—Ä–∞–≤—å –ø—Ä–æ–±–ª–µ–º—ã
# 3. –ü–æ–≤—Ç–æ—Ä–∏
make quality

# 4. –¢–µ–ø–µ—Ä—å –∫–æ–º–º–∏—Ç—å
git commit -m "feat: new feature via TDD"
```

---

## ‚úÖ Checklist –¥–ª—è TDD –∏—Ç–µ—Ä–∞—Ü–∏–∏

### –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
- [ ] –ò–∑—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏ –∏–∑ roadmap.md –∏ —Ç–∞—Å–∫–ª–∏—Å—Ç–∞ —Å–ø—Ä–∏–Ω—Ç–∞
- [ ] –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- [ ] –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω
- [ ] –ü–ª–∞–Ω —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω

### –î–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

**üî¥ RED:**
- [ ] –¢–µ—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω
- [ ] –¢–µ—Å—Ç –ø–∞–¥–∞–µ—Ç
- [ ] –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è

**üü¢ GREEN:**
- [ ] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
- [ ] –ù–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç

**üîµ REFACTOR:**
- [ ] –ö–æ–¥ —É–ª—É—á—à–µ–Ω (SOLID, DRY)
- [ ] Type hints –¥–æ–±–∞–≤–ª–µ–Ω—ã
- [ ] –¢–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- [ ] Lint –±–µ–∑ –æ—à–∏–±–æ–∫
- [ ] Typecheck –±–µ–∑ –æ—à–∏–±–æ–∫

### –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
- [ ] `make quality` ‚Üí –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ passed
- [ ] Coverage >= 95%
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- [ ] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
- [ ] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
- [ ] –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω
- [ ] roadmap.md –∏ —Ç–∞—Å–∫–ª–∏—Å—Ç —Å–ø—Ä–∏–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã

---

**–í–µ—Ä—Å–∏—è:** 1.0
**–°–æ–∑–¥–∞–Ω:** 2025-10-11
**–ü—Ä–∏–Ω—Ü–∏–ø:** Test First - RED ‚Üí GREEN ‚Üí REFACTOR ‚Üí REPEAT
**–ü–æ–¥—Ö–æ–¥:** TDD - –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç—ã
