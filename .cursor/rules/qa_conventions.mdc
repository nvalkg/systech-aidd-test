---
alwaysApply: true
---
# QA Conventions - –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤

> **–ë–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** [vision.md](../../docs/vision.md) | [conventions.mdc](conventions.mdc)

## –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### Test-Driven Development (TDD)

**–¶–∏–∫–ª Red-Green-Refactor:**
```
üî¥ Red   ‚Üí –ü–∏—à–µ–º failing —Ç–µ—Å—Ç (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
üü¢ Green ‚Üí –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (—Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç)
üîµ Refactor ‚Üí –£–ª—É—á—à–∞–µ–º –∫–æ–¥ (—Ç–µ—Å—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –∑–µ–ª–µ–Ω—ã–º–∏)
```

**TDD workflow:**
1. –ü–∏—à–µ–º —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (—Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç)
2. –†–µ–∞–ª–∏–∑—É–µ–º –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
3. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–º –∫–æ–¥ (SOLID, DRY), —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
4. –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

### KISS (Keep It Simple, Stupid)

- **–¢–µ—Å—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ** - –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
- **–û–¥–∏–Ω —Ç–µ—Å—Ç = –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π** - –Ω–µ –∫–æ–º–±–∏–Ω–∏—Ä—É–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
- **–ü—Ä–æ—Å—Ç—ã–µ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤** - `test_config_missing_token()`, –Ω–µ `test_1()`
- **–ú–∏–Ω–∏–º—É–º –º–æ–∫–æ–≤** - –º–æ–∫–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (API, –ë–î)

### DRY (Don't Repeat Yourself)

- **–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–∫—Å—Ç—É—Ä—ã** - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–π setup –∫–æ–¥
- **–í—ã–Ω–µ—Å–∏ –æ–±—â–∏–µ –º–æ–∫–∏** - –≤ `conftest.py`
- **–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö** - –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥—å –≤–µ–∑–¥–µ

### –ß—Ç–æ –ù–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (–∏–∑–±–µ–≥–∞–π boilerplate)

‚ùå **–ù–ï —Ç–µ—Å—Ç–∏—Ä—É–π:**
- –ì–µ—Ç—Ç–µ—Ä—ã/—Å–µ—Ç—Ç–µ—Ä—ã –±–µ–∑ –ª–æ–≥–∏–∫–∏ (`@property` –±–µ–∑ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)
- –¢—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã (`__init__` –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ (aiogram, openai)
- Private –º–µ—Ç–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é (—Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ public API)
- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ enum'—ã (–µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–∏–∫–∏)

‚úÖ **–¢–µ—Å—Ç–∏—Ä—É–π:**
- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É (–≤–∞–ª–∏–¥–∞—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
- –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ (–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, None, –æ—à–∏–±–∫–∏)
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏)
- –ü—É–±–ª–∏—á–Ω—ã–µ API –∫–ª–∞—Å—Å–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ (exceptions, fallbacks)

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–∞ (Arrange-Act-Assert)

### –§–æ—Ä–º–∞—Ç AAA

```python
@pytest.mark.asyncio
async def test_process_message(mock_llm_client):
    """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
    # Arrange: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    manager = ConversationManager(mock_llm_client, "System prompt", max_history=10)

    # Act: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    response = await manager.process_message(123, "Hello")

    # Assert: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    assert response == "Test response"
    mock_llm_client.get_response.assert_called_once()
    context = manager.storage.get_context(123)
    assert len(context.messages) == 1
```

### –ü—Ä–∞–≤–∏–ª–∞ AAA

- **Arrange** - –≤—Å–µ –º–æ–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ
- **Act** - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–æ–¥–∏–Ω –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞)
- **Assert** - –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–π `assert_called_once()`, `match=`

### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö

- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–æ–∫–æ–≤
- Docstring –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É AAA –±–ª–æ–∫–∞–º–∏

## –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤

### –ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

**–§–∞–π–ª—ã:** `test_<module_name>.py`
```
src/config.py      ‚Üí tests/test_config.py
src/llm_client.py  ‚Üí tests/test_llm_client.py
```

**–§—É–Ω–∫—Ü–∏–∏:** `test_<what>_<scenario>()`
```python
test_config_missing_token()           # –ß—Ç–æ + —Å—Ü–µ–Ω–∞—Ä–∏–π
test_get_response_api_error()         # –ú–µ—Ç–æ–¥ + –æ—à–∏–±–∫–∞
test_process_message_success()        # –ú–µ—Ç–æ–¥ + —É—Å–ø–µ—Ö
test_handle_empty_message()           # –ú–µ—Ç–æ–¥ + –≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π
```

**Docstring:**
```python
def test_config_invalid_max_tokens(valid_env, monkeypatch):
    """–¢–µ—Å—Ç: ValueError –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º MAX_TOKENS"""
```

### –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

| –°—Ü–µ–Ω–∞—Ä–∏–π | –ü–∞—Ç—Ç–µ—Ä–Ω | –ü—Ä–∏–º–µ—Ä |
|----------|---------|--------|
| –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ | `test_<method>_success()` | `test_get_response_success()` |
| –û—à–∏–±–∫–∞ | `test_<method>_<error>()` | `test_get_response_api_error()` |
| –ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π | `test_<method>_<edge_case>()` | `test_handle_empty_message()` |
| –í–∞–ª–∏–¥–∞—Ü–∏—è | `test_<method>_invalid_<param>()` | `test_config_invalid_temperature()` |
| –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö | `test_<method>_missing_<param>()` | `test_config_missing_token()` |

## Async —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### pytest-asyncio

```python
import pytest
from unittest.mock import AsyncMock

@pytest.mark.asyncio
async def test_get_response_success(llm_client: LLMClient) -> None:
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM"""
    # Arrange: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ mock
    mock_response = Mock(
        choices=[Mock(message=Mock(content="Test response"))],
        usage=Mock(total_tokens=50)
    )

    # Act: –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ async –º–µ—Ç–æ–¥–∞
    with patch.object(
        llm_client.client.chat.completions, "create", new_callable=AsyncMock
    ) as mock_create:
        mock_create.return_value = mock_response
        result = await llm_client.get_response([{"role": "user", "content": "Hi"}])

        # Assert
        assert result == "Test response"
        mock_create.assert_called_once()
```

### –ü—Ä–∞–≤–∏–ª–∞ async —Ç–µ—Å—Ç–æ–≤

- **`@pytest.mark.asyncio`** - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–π
- **`AsyncMock`** - –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è async –º–µ—Ç–æ–¥–æ–≤
- **Type hints** - `-> None` –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- **–§–∏–∫—Å—Ç—É—Ä—ã** - –º–æ–≥—É—Ç –±—ã—Ç—å async (–∏—Å–ø–æ–ª—å–∑—É–π `async def` –≤ —Ñ–∏–∫—Å—Ç—É—Ä–µ)

### –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ async API

```python
# –£—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
mock_create.return_value = mock_response

# –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏
mock_create.side_effect = Exception("API Error: Rate limit exceeded")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
mock_create.assert_called_once_with(
    model="test-model",
    messages=messages,
    max_tokens=100,
    temperature=0.7,
)
```

## –§–∏–∫—Å—Ç—É—Ä—ã

### –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã (conftest.py)

```python
@pytest.fixture
def clean_env(monkeypatch):
    """–û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    monkeypatch.setattr("src.config.load_dotenv", lambda: None)
    monkeypatch.delenv("TELEGRAM_BOT_TOKEN", raising=False)
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

@pytest.fixture
def valid_env(monkeypatch):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    monkeypatch.setattr("src.config.load_dotenv", lambda: None)
    monkeypatch.setenv("TELEGRAM_BOT_TOKEN", "test_telegram_token")
    monkeypatch.setenv("OPENROUTER_API_KEY", "test_openrouter_key")
```

### –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã

```python
@pytest.fixture
def llm_client() -> LLMClient:
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å LLMClient –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return LLMClient(
        api_key="test-api-key",
        model="test-model",
        max_tokens=100,
        temperature=0.7,
    )

@pytest.fixture
def mock_llm_client():
    """–ú–æ–∫ LLMClient –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ConversationManager"""
    client = AsyncMock()
    client.model = "test-model"
    client.get_response = AsyncMock(return_value="Test response")
    return client
```

### –ü—Ä–∞–≤–∏–ª–∞ —Ñ–∏–∫—Å—Ç—É—Ä

- **–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã** - –≤ `conftest.py` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `valid_env`)
- **–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã** - –≤ —Ñ–∞–π–ª–µ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `llm_client`)
- **–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ** - —Ñ–∏–∫—Å—Ç—É—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
- **–ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ** - –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —Å—É—Ç—å (`mock_llm_client`, –Ω–µ `client1`)

## –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ

### –°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è

**–ü—Ä–∞–≤–∏–ª–æ:** –ú–æ–∫–∏—Ä—É–π –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–π —Å–≤–æ–π –∫–æ–¥

‚úÖ **–ú–æ–∫–∏—Ä—É–π:**
- –í–Ω–µ—à–Ω–∏–µ API (OpenRouter, Telegram)
- –§–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (load_dotenv)
- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã (time, datetime)
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏ (–ø—Ä–∏ unit —Ç–µ—Å—Ç–∞—Ö)

‚ùå **–ù–µ –º–æ–∫–∏—Ä—É–π:**
- –°–≤–æ–π –±–∏–∑–Ω–µ—Å-–∫–æ–¥ (—Ç–µ—Å—Ç–∏—Ä—É–π —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (list, dict)
- Dataclass'—ã –∏ –º–æ–¥–µ–ª–∏
- Simple getters/setters

### –¢–∏–ø—ã –º–æ–∫–æ–≤

#### Mock –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

```python
from unittest.mock import Mock, patch

mock_config = Mock()
mock_config.openrouter_key = "test-key"
mock_config.default_model = "test-model"
```

#### AsyncMock –¥–ª—è async –∫–æ–¥–∞

```python
from unittest.mock import AsyncMock

mock_bot = Mock()
mock_bot.start_polling = AsyncMock(side_effect=KeyboardInterrupt())
mock_bot.stop = AsyncMock()
```

#### patch –¥–ª—è –ø–æ–¥–º–µ–Ω—ã

```python
# –ü–æ–¥–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞
with patch.object(
    llm_client.client.chat.completions, "create", new_callable=AsyncMock
) as mock_create:
    mock_create.return_value = mock_response
    result = await llm_client.get_response(messages)

# –ü–æ–¥–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞
with patch("src.main.Config") as mock_config_class:
    mock_config_class.return_value = mock_config
    await main()
```

#### side_effect –¥–ª—è –æ—à–∏–±–æ–∫

```python
# –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
mock_create.side_effect = Exception("API Error: Rate limit exceeded")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±—Ä–æ—Å–∏–ª–æ—Å—å
with pytest.raises(Exception, match="API Error: Rate limit exceeded"):
    await llm_client.get_response(messages)
```

### –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è

#### –ú–æ–∫ —Å–ª–æ–∂–Ω–æ–≥–æ API –æ—Ç–≤–µ—Ç–∞

```python
# Arrange: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ OpenAI response
mock_message = Mock()
mock_message.content = "Test response from LLM"

mock_choice = Mock()
mock_choice.message = mock_message

mock_usage = Mock()
mock_usage.total_tokens = 50

mock_response = Mock()
mock_response.choices = [mock_choice]
mock_response.usage = mock_usage
```

#### –ú–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ main()

```python
@pytest.mark.asyncio
async def test_main_success() -> None:
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    with (
        patch("src.main.Config") as mock_config_class,
        patch("src.main.LLMClient") as mock_llm_class,
        patch("src.main.ConversationManager") as mock_conv_class,
        patch("src.main.TelegramBot") as mock_bot_class,
    ):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_config = Mock()
        mock_config_class.return_value = mock_config

        mock_bot = Mock()
        mock_bot.start_polling = AsyncMock(side_effect=KeyboardInterrupt())
        mock_bot.stop = AsyncMock()
        mock_bot_class.return_value = mock_bot

        # Act
        await main()

        # Assert
        mock_config_class.assert_called_once()
        mock_bot.stop.assert_called_once()
```

## Coverage –º–µ—Ç—Ä–∏–∫–∏

### –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

| –¢–∏–ø –º–æ–¥—É–ª—è | Coverage —Ü–µ–ª—å | –ü—Ä–∏–º–µ—Ä—ã |
|------------|---------------|---------|
| –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ | 100% | config.py, models.py |
| –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ | >90% | llm_client.py, conversation_manager.py |
| –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ | >80% | telegram_bot.py, main.py |
| **–û–±—â–∏–π –ø—Ä–æ–µ–∫—Ç** | **>80%** | **–¢–µ–∫—É—â–∏–π: 95%** |

### –ö–æ–º–∞–Ω–¥—ã coverage

```bash
# –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å coverage
make test

# –î–µ—Ç–∞–ª—å–Ω—ã–π HTML –æ—Ç—á–µ—Ç
pytest --cov=src --cov-report=html
# –û—Ç–∫—Ä—ã—Ç—å htmlcov/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ

# Coverage –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
pytest tests/test_llm_client.py --cov=src.llm_client --cov-report=term-missing
```

### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è coverage

- **100%** - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∫—Ä—ã—Ç—ã (–∫—Ä–∏—Ç–∏—á–Ω—ã–π –∫–æ–¥)
- **>90%** - –æ—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
- **>80%** - —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
- **<80%** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã

**–ü—Ä–æ–ø—É—Å–∫–∞–µ–º:**
- `if __name__ == "__main__"` - entry points
- –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
- Debug –∫–æ–¥ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π)

## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

```bash
# –ü–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º - –∑–∞–ø—É—Å—Ç–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
make quality

# –ß—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:
# 1. make format   - –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# 2. make lint     - ruff check (0 –æ—à–∏–±–æ–∫)
# 3. make typecheck - mypy (0 –æ—à–∏–±–æ–∫)
# 4. make test     - pytest + coverage
```

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

‚úÖ **–•–æ—Ä–æ—à–∏–µ —Ç–µ—Å—Ç—ã:**
- –ë—ã—Å—Ç—Ä—ã–µ (<1s –Ω–∞ —Ç–µ—Å—Ç, –∫—Ä–æ–º–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö)
- –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞)
- –ü–æ–Ω—è—Ç–Ω—ã–µ (–∏–º—è —Ç–µ—Å—Ç–∞ = –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
- –°—Ç–∞–±–∏–ª—å–Ω—ã–µ (–Ω–µ —Ñ–ª–∞–∫–∞—é—Ç)
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ (–ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ)

‚ùå **–ü–ª–æ—Ö–∏–µ —Ç–µ—Å—Ç—ã:**
- –ú–µ–¥–ª–µ–Ω–Ω—ã–µ (>5s –Ω–∞ unit —Ç–µ—Å—Ç)
- –ó–∞–≤–∏—Å–∏–º—ã–µ (–ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–∂–µ–Ω)
- –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–µ (—á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç `test_1()`?)
- –§–ª–∞–∫—É—é—â–∏–µ (–∏–Ω–æ–≥–¥–∞ –ø–∞–¥–∞—é—Ç –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã)
- –•—Ä—É–ø–∫–∏–µ (—Å–ª–æ–º–∞—é—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏)

### Type hints –≤ —Ç–µ—Å—Ç–∞—Ö

```python
@pytest.fixture
def llm_client() -> LLMClient:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å return type"""
    return LLMClient(api_key="test-key", model="test-model")

@pytest.mark.asyncio
async def test_get_response_success(llm_client: LLMClient) -> None:
    """–¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å -> None"""
    result = await llm_client.get_response([{"role": "user", "content": "Hi"}])
    assert result == "Test response"
```

## –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Config

```python
def test_config_missing_telegram_token(clean_env, monkeypatch):
    """–¢–µ—Å—Ç: ValueError –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ TELEGRAM_BOT_TOKEN"""
    monkeypatch.setenv("OPENROUTER_API_KEY", "test_key")

    with pytest.raises(ValueError, match="TELEGRAM_BOT_TOKEN"):
        Config()

def test_config_invalid_max_tokens(valid_env, monkeypatch):
    """–¢–µ—Å—Ç: ValueError –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º MAX_TOKENS"""
    monkeypatch.setenv("MAX_TOKENS", "not_a_number")

    with pytest.raises(ValueError, match="MAX_TOKENS –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"):
        Config()
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram

```python
@pytest.mark.asyncio
async def test_handle_message_success(telegram_bot, mock_message):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # Arrange
    mock_conversation_manager = AsyncMock()
    mock_conversation_manager.process_message = AsyncMock(
        return_value="LLM response"
    )
    telegram_bot.conversation_manager = mock_conversation_manager

    # Act
    await telegram_bot.handle_message(mock_message)

    # Assert
    mock_conversation_manager.process_message.assert_called_once_with(
        12345, "test message"
    )
    mock_message.answer.assert_called_once_with("LLM response")
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

```python
@pytest.mark.asyncio
async def test_handle_message_error(telegram_bot, mock_message):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ LLM"""
    # Arrange
    mock_conversation_manager = AsyncMock()
    mock_conversation_manager.process_message = AsyncMock(
        side_effect=Exception("API Error")
    )
    telegram_bot.conversation_manager = mock_conversation_manager

    # Act
    await telegram_bot.handle_message(mock_message)

    # Assert
    mock_message.answer.assert_called_once()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    assert "–æ—à–∏–±–∫–∞" in mock_message.answer.call_args[0][0].lower()
```

## Anti-patterns (—á—Ç–æ –ù–ï –¥–µ–ª–∞—Ç—å)

### ‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –æ–¥–Ω–æ–º —Ç–µ—Å—Ç–µ

```python
# –ü–õ–û–•–û: —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç 3 —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è
def test_config():
    config1 = Config()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    assert config1.max_tokens == 1000

    with pytest.raises(ValueError):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏
        Config()  # –ù–æ –±–µ–∑ –Ω—É–∂–Ω—ã—Ö env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    config2 = Config()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    assert config2.temperature == 0.5

# –•–û–†–û–®–û: 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞
def test_config_valid(valid_env):
    config = Config()
    assert config.max_tokens == 1000

def test_config_missing_token(clean_env):
    with pytest.raises(ValueError, match="TELEGRAM_BOT_TOKEN"):
        Config()

def test_config_custom_temperature(valid_env, monkeypatch):
    monkeypatch.setenv("TEMPERATURE", "0.5")
    config = Config()
    assert config.temperature == 0.5
```

### ‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ implementation details

```python
# –ü–õ–û–•–û: —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
def test_trim_history_internal():
    storage = HistoryStorage(max_history=10)
    storage._trim_history(123)  # Private –º–µ—Ç–æ–¥!

# –•–û–†–û–®–û: —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç public API
def test_history_limited_to_max(storage):
    """–¢–µ—Å—Ç: –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ max_history"""
    user_id = 123
    for i in range(15):
        storage.add_message(user_id, f"Message {i}", "System prompt")

    context = storage.get_context(user_id)
    assert len(context.messages) == 10  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–Ω–æ
```

### ‚ùå –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ

```python
# –ü–õ–û–•–û: –º–æ–∫–∏—Ä—É–µ–º —Å–≤–æ–π –∫–æ–¥
def test_conversation_manager_with_mocks():
    mock_storage = Mock()
    mock_formatter = Mock()
    manager = ConversationManager(mock_llm_client, "System prompt")
    manager.storage = mock_storage  # –ú–æ–∫–∏—Ä—É–µ–º —Å–≤–æ—é –ª–æ–≥–∏–∫—É!
    manager.formatter = mock_formatter

# –•–û–†–û–®–û: —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
@pytest.mark.asyncio
async def test_process_message(mock_llm_client):
    manager = ConversationManager(mock_llm_client, "System prompt")
    response = await manager.process_message(123, "Hello")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ storage –∏ formatter
    context = manager.storage.get_context(123)
    assert len(context.messages) == 1
```

### ‚ùå Magic numbers –∏ —Ö–∞—Ä–¥–∫–æ–¥

```python
# –ü–õ–û–•–û: –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
def test_something():
    assert result == 42  # –ß—Ç–æ —Ç–∞–∫–æ–µ 42?
    assert len(messages) == 3  # –ü–æ—á–µ–º—É 3?

# –•–û–†–û–®–û: —è–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
def test_history_trim():
    MAX_HISTORY = 10
    storage = HistoryStorage(max_history=MAX_HISTORY)

    messages_count = 15
    for i in range(messages_count):
        storage.add_message(123, f"Message {i}", "System prompt")

    context = storage.get_context(123)
    assert len(context.messages) == MAX_HISTORY
```

### ‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞

```python
# –ü–õ–û–•–û: —Ç–µ—Å—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
global_storage = None

def test_create_storage():
    global global_storage
    global_storage = HistoryStorage()

def test_add_message():
    global_storage.add_message(123, "Hello", "System prompt")  # –£–ø–∞–¥–µ—Ç –µ—Å–ª–∏ test_create_storage –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è

# –•–û–†–û–®–û: –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
@pytest.fixture
def storage():
    return HistoryStorage()

def test_create_storage(storage):
    assert storage is not None

def test_add_message(storage):
    storage.add_message(123, "Hello", "System prompt")
    assert len(storage.get_context(123).messages) == 1
```

## TDD –ø—Ä–∞–∫—Ç–∏–∫–∏

### –ù–∞—á–∏–Ω–∞–π —Å —Ç–µ—Å—Ç–∞

```python
# 1Ô∏è‚É£ –ü–∏—à–µ–º —Ç–µ—Å—Ç –ü–ï–†–ï–î —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
def test_get_user_info_success():
    """–¢–µ—Å—Ç: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏ username –∏–∑ Message"""
    bot = TelegramBot(...)
    message = Mock()
    message.from_user = Mock(id=123, username="john_doe", first_name="John")

    user_id, username = bot._get_user_info(message)

    assert user_id == 123
    assert username == "john_doe"

# 2Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞–¥–∞–µ—Ç (–º–µ—Ç–æ–¥ _get_user_info –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)

# 3Ô∏è‚É£ –†–µ–∞–ª–∏–∑—É–µ–º –º–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
def _get_user_info(self, message: Message) -> tuple[int, str]:
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    return user_id, username

# 4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç - –¥–æ–±–∞–≤–ª—è–µ–º edge cases
def test_get_user_info_no_username():
    """–¢–µ—Å—Ç: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ first_name –µ—Å–ª–∏ –Ω–µ—Ç username"""
    # ... —Ç–µ—Å—Ç –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–ª—É—á–∞—è

# 5Ô∏è‚É£ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
def _get_user_info(self, message: Message) -> tuple[int, str]:
    if not message.from_user:
        raise ValueError("Message has no user information")

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "Unknown"
    return user_id, username
```

### Red-Green-Refactor –≤ –¥–µ–π—Å—Ç–≤–∏–∏

```python
# üî¥ RED: –¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–ø–∞–¥–∞–µ—Ç)
def test_history_storage_trim():
    """–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–µ–∑–∞—Ç—å—Å—è –¥–æ max_history"""
    storage = HistoryStorage(max_history=10)

    for i in range(15):
        storage.add_message(123, f"Message {i}", "System prompt")

    context = storage.get_context(123)
    assert len(context.messages) == 10  # –ü–∞–¥–∞–µ—Ç - –æ–±—Ä–µ–∑–∫–∏ –Ω–µ—Ç

# üü¢ GREEN: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (—Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç)
def add_message(self, user_id: int, text: str, system_prompt: str) -> None:
    context = self.get_or_create_context(user_id, system_prompt)
    context.messages.append(UserMessage(user_id, text, datetime.now()))

    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–µ–∑–∫–∞
    if len(context.messages) > self.max_history:
        context.messages = context.messages[-self.max_history:]

# üîµ REFACTOR: –í—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (DRY)
def add_message(self, user_id: int, text: str, system_prompt: str) -> None:
    context = self.get_or_create_context(user_id, system_prompt)
    context.messages.append(UserMessage(user_id, text, datetime.now()))
    self._trim_history(user_id)

def _trim_history(self, user_id: int) -> None:
    """–û–±—Ä–µ–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ max_history"""
    context = self.contexts.get(user_id)
    if not context:
        return

    if len(context.messages) > self.max_history:
        context.messages = context.messages[-self.max_history:]
    if len(context.responses) > self.max_history:
        context.responses = context.responses[-self.max_history:]
```

### –¢–µ—Å—Ç–∏—Ä—É–π –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏

```python
# –ù–µ —Ç–æ–ª—å–∫–æ happy path
def test_get_response_success():
    """‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    pass

# –ù–æ –∏ edge cases
def test_get_response_empty_content():
    """‚úÖ –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM"""
    pass

def test_get_response_no_usage():
    """‚úÖ –û—Ç–≤–µ—Ç –±–µ–∑ usage –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    pass

def test_get_response_api_error():
    """‚úÖ –û—à–∏–±–∫–∞ API"""
    pass

def test_handle_empty_message():
    """‚úÖ –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    pass

def test_handle_long_message():
    """‚úÖ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    pass
```

## Cheatsheet

### –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è

```python
# 1. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞
touch tests/test_my_module.py

# 2. –ò–º–ø–æ—Ä—Ç—ã
import pytest
from unittest.mock import AsyncMock, Mock, patch
from src.my_module import MyClass

# 3. –§–∏–∫—Å—Ç—É—Ä—ã
@pytest.fixture
def my_instance():
    return MyClass(...)

# 4. –ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç (TDD: –Ω–∞—á–Ω–∏ —Å Red)
@pytest.mark.asyncio
async def test_my_method_success(my_instance):
    """–¢–µ—Å—Ç: –û–ø–∏—Å–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    # Arrange
    expected = "expected result"

    # Act
    result = await my_instance.my_method()

    # Assert
    assert result == expected

# 5. –ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç (–¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å - Red)
pytest tests/test_my_module.py -v

# 6. –†–µ–∞–ª–∏–∑—É–π –º–∏–Ω–∏–º—É–º (Green)
# 7. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ (Refactor)
# 8. –î–æ–±–∞–≤—å edge cases
```

### –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
make test

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
pytest tests/test_config.py -v

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
pytest tests/test_config.py::test_config_valid -v

# Watch mode (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
pytest-watch

# Coverage –¥–ª—è –º–æ–¥—É–ª—è
pytest tests/test_llm_client.py --cov=src.llm_client --cov-report=term-missing

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
pytest --durations=10

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
make quality
```

---

**–í–µ—Ä—Å–∏—è:** 1.0
**–°–æ–∑–¥–∞–Ω:** 2025-10-11
**–ü—Ä–∏–Ω—Ü–∏–ø:** Test First - –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç, –ø–æ—Ç–æ–º –∫–æ–¥
**–ü–æ–¥—Ö–æ–¥:** TDD + KISS + DRY = Quality Tests
