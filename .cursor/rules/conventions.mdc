---
alwaysApply: true
---
# Conventions - Правила разработки кода

> **Базовый документ:** [vision.md](vision.md) - полное техническое видение проекта

## Принципы разработки

### KISS (Keep It Simple, Stupid)
- Максимальная простота, никакого оверинжиниринга
- Прямолинейный код без излишних абстракций
- Простые методы без сложной логики
- Только необходимый функционал для MVP

### ООП: 1 класс = 1 файл
- **Жесткое правило:** каждый класс в отдельном файле
- Имя файла совпадает с именем класса в snake_case
- Один класс = одна ответственность
- Никаких вспомогательных классов в том же файле

### Минимализм зависимостей
- Слабая связанность между классами
- Минимум методов в интерфейсах
- Никаких циклических зависимостей
- Зависимости: TelegramBot → ConversationManager → LLMClient

## Структура кода

### Обязательная структура файлов
```
src/
├── telegram_bot.py          # Класс TelegramBot
├── llm_client.py           # Класс LLMClient
├── conversation_manager.py # Класс ConversationManager
├── config.py               # Класс Config
└── main.py                 # Точка входа
```

### Ответственность классов
- **TelegramBot** - только работа с Telegram API (aiogram)
- **LLMClient** - только взаимодействие с OpenRouter через openai client
- **ConversationManager** - только управление диалогом и промптами
- **Config** - только загрузка конфигурации из .env

### Точка входа (main.py)
- Обработка ошибок на верхнем уровне
- Инициализация всех компонентов
- Настройка логирования

## Технические требования

### Асинхронность
- Все методы работы с API - **async/await**
- Используем возможности aiogram 3.x
- Никаких блокирующих операций

### Модель данных
- Используем **@dataclass** для структур данных
- Dataclass-ы размещаем в conversation_manager.py
- Только текстовые поля (без сложных типов)
- См. [vision.md](vision.md) для структуры данных

### Обработка ошибок
- Простое логирование ошибок
- Понятные сообщения пользователю
- Никаких retry механизмов (только логирование)
- Try/catch на уровне main.py

## Конфигурация

### Загрузка настроек
- Все настройки через **.env** файл
- Используем **python-dotenv**
- Значения по умолчанию для необязательных параметров
- Валидация обязательных токенов при старте

### Обязательные переменные
```bash
TELEGRAM_BOT_TOKEN=...
OPENROUTER_API_KEY=...
```

## Логирование

### Базовые правила
- Консольное логирование (никаких файлов)
- Формат: `%(asctime)s - %(name)s - %(levelname)s - %(message)s`
- Уровни: INFO для работы, ERROR для ошибок
- **Не логируем:** токены, полные тексты сообщений (только метаданные)

### Что логируем
- Запуск/остановка компонентов
- Получение сообщений (user_id, длина текста)
- Запросы к LLM (модель, время)
- Ошибки с деталями

## Ограничения MVP

- Хранение данных **только в памяти** (никаких БД)
- Максимум **10 сообщений** в истории
- **Только текстовые** сообщения
- Один диалог на пользователя
- Нет персистентности между перезапусками

## Работа с LLM

### OpenRouter через openai client
```python
# Базовая конфигурация
base_url = "https://openrouter.ai/api/v1"
api_key = config.openrouter_key
model = "openai/gpt-3.5-turbo"
max_tokens = 1000
temperature = 0.7
```

### Формат сообщений
```python
messages = [
    {"role": "system", "content": system_prompt},
    {"role": "user", "content": message_text},
    {"role": "assistant", "content": response_text},
    # ... история диалога
]
```

## Команды бота

### Обязательные
- `/start` - приветствие и инструкции
- `/help` - справка
- `/clear` - очистка истории диалога
- Любой текст - отправка в LLM

## Качество кода

### Именование
- Классы: `PascalCase`
- Методы и функции: `snake_case`
- Константы: `UPPER_SNAKE_CASE`
- Переменные: `snake_case`

### Документация
- Краткие docstring для классов
- Комментарии только где необходимо
- Код должен быть self-explanatory

### Python требования
- **Python 3.11+**
- Type hints для публичных методов
- Следуем PEP 8

---

**Версия:** 1.0  
**Статус:** Готово к использованию

