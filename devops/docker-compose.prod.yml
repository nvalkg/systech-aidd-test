# Docker Compose для production развертывания
#
# Использование:
#   docker-compose -f docker-compose.prod.yml pull
#   docker-compose -f docker-compose.prod.yml up -d
#
# Образы: ghcr.io/nvalkg/aidd-{bot,api,frontend}:latest

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-aidd}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-aidd}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aidd} -d ${POSTGRES_DB:-aidd}"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    image: ghcr.io/nvalkg/aidd-bot:latest
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_USER: ${POSTGRES_USER:-aidd}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-aidd}
    env_file:
      - .env

  api:
    image: ghcr.io/nvalkg/aidd-api:latest
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8010:8000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      POSTGRES_USER: ${POSTGRES_USER:-aidd}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-aidd}
    env_file:
      - .env

  frontend:
    image: ghcr.io/nvalkg/aidd-frontend:latest
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "3005:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://83.147.246.172:8010

volumes:
  postgres_data_prod:
    driver: local
